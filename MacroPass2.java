import java.io.*;  // For file operations
import java.util.*; // For using collections like Map, List, etc.

public class MacroPass2 {
    public static void main(String[] args) {
        try {
            // Step 1: Read MNT and MDT generated by Pass-I
            Map<String, Integer> MNT = new HashMap<>(); // Stores macro name with MDT index
            List<String> MDT = new ArrayList<>();       // Stores macro definition lines

            // --- Reading MNT file ---
            BufferedReader mntReader = new BufferedReader(new FileReader("mnt.txt"));
            String line;
            while ((line = mntReader.readLine()) != null) { // Read line by line
                StringTokenizer st = new StringTokenizer(line, "\t"); // Split using tab
                String macroName = st.nextToken();         // Macro name
                int mdtIndex = Integer.parseInt(st.nextToken()); // MDT index
                MNT.put(macroName, mdtIndex);             // Store in MNT map
            }
            mntReader.close(); // Close file

            // --- Reading MDT file ---
            BufferedReader mdtReader = new BufferedReader(new FileReader("mdt.txt"));
            while ((line = mdtReader.readLine()) != null) { // Read each line
                MDT.add(line);                              // Store macro definition line
            }
            mdtReader.close(); // Close MDT file

            // Step 2: Read the main source program (with macro calls)
            BufferedReader srcReader = new BufferedReader(new FileReader("Input.txt"));
            PrintWriter output = new PrintWriter(new FileWriter("expanded_output.txt")); // Output expanded code

            boolean insideMacroDef = false; // Used to skip macro definition part

            // Process each line from Input.txt
            while ((line = srcReader.readLine()) != null) {
                StringTokenizer st = new StringTokenizer(line, " "); // Split line into tokens

                // Skip MACRO and MEND definitions (handled in Pass-I)
                String first = st.nextToken();
                if (first.equals("MACRO")) {
                    insideMacroDef = true; // Skip till MEND
                    continue;
                } else if (first.equals("MEND")) {
                    insideMacroDef = false;
                    continue;
                }
                if (insideMacroDef) continue; // Continue skipping macro body

                // Step 3: Check if current line is a macro call
                if (MNT.containsKey(first)) { // If macro name found in MNT
                    int index = MNT.get(first); // Get its MDT index
                    String argList = st.hasMoreTokens() ? st.nextToken() : ""; // Get actual arguments if present
                    StringTokenizer argTokens = new StringTokenizer(argList, ","); // Split arguments by comma
                    List<String> actualArgs = new ArrayList<>(); // Store actual arguments

                    // Read all arguments passed during macro call
                    while (argTokens.hasMoreTokens()) {
                        actualArgs.add(argTokens.nextToken());
                    }

                    // Step 4: Expand macro body using MDT
                    for (int i = index; i < MDT.size(); i++) {
                        String macroLine = MDT.get(i);   // Get one line from MDT
                        if (macroLine.equals("MEND"))    // Stop expansion at MEND
                            break;

                        // Replace positional arguments (AR0, AR1...) with actual arguments
                        for (int a = 0; a < actualArgs.size(); a++) {
                            macroLine = macroLine.replace("AR" + a, actualArgs.get(a));
                        }

                        // Write expanded instruction to output file
                        output.println(macroLine);
                    }
                } else {
                    // Step 5: If line is not a macro call, write it as is
                    output.println(line);
                }
            }

            // Close all file streams
            srcReader.close();
            output.close();

            System.out.println("✅ Pass-II Completed — Expanded program written to expanded_output.txt");

        } catch (Exception e) {
            e.printStackTrace(); // Display error if something goes wrong
        }
    }
}
